name: Build and Deploy backend Docker Image

on:
  push:
    branches:
      - '**'    # Trigger on any push to any branch (including edits on GitHub)
  pull_request:
    branches:
      - '**'    # Also trigger when a pull request is opened, synchronized, or updated
  workflow_call:
env:
  DOCKER_IMAGE_PREFIX: reneboy/docility-api
  SSH_HOST: ${{ secrets.SERVER_IP }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} 

jobs:
  # Step 1: Checkout Code
  checkout:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.vars.outputs.branch_name }}
      image_tag: ${{ steps.vars.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Branch Variables
        id: vars
        run: |
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.run_number }}" >> $GITHUB_OUTPUT
 
  build:
    uses: ./.github/workflows/build.yml
    needs: checkout
    secrets: inherit

  dependabot:
    uses: ./.github/workflows/dependabot.yml
    needs: checkout
    secrets: inherit

  snyk-scan:
    uses: ./.github/workflows/snyk.yml
    needs: checkout
    secrets: inherit     
  # Step 3: Push to Docker Hub
  push-artifactory:
    runs-on: ubuntu-latest
    needs: [build, dependabot, snyk-scan]
    environment: prod
    steps:
      - name: Download Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: |
          IMAGE_NAME=${{ env.DOCKER_IMAGE_PREFIX }}-master
          IMAGE_TAG=${{ github.run_number }}
          docker load -i image.tar
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:$IMAGE_TAG

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          IMAGE_NAME=${{ env.DOCKER_IMAGE_PREFIX }}-master
          IMAGE_TAG=${{ github.run_number }}
          docker push $IMAGE_NAME:$IMAGE_TAG

   # Step 4: Deploy to Server via SSH
  deploy:
    runs-on: ubuntu-latest
    needs: push-artifactory
    environment: prod
    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            IMAGE_NAME="${{ env.DOCKER_IMAGE_PREFIX }}-master"
            IMAGE_TAG="${{ github.run_number }}"
            BACKEND_PORT=1337

            echo "Pulling backend image: $IMAGE_NAME:$IMAGE_TAG"
            sudo docker pull $IMAGE_NAME:$IMAGE_TAG

            echo "Removing existing backend container..."
            if [ "$(sudo docker ps -a -q -f name=backend-app)" ]; then
              sudo docker stop backend-app
              sudo docker rm backend-app
            fi

            if [ "$(sudo docker ps -q -f publish=$BACKEND_PORT)" ]; then
              sudo docker rm -f $(sudo docker ps -q -f publish=$BACKEND_PORT)
            fi

            echo "Starting backend container..."
            sudo docker run -d --name backend-app -p $BACKEND_PORT:1337 $IMAGE_NAME:$IMAGE_TAG

            echo "Restarting Nginx..."
            sudo systemctl restart nginx

            sudo docker ps | grep backend-app

  # Step 5: Cleanup Docker Image (Optional)
  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Cleanup Docker Image
        run: |
          IMAGE_NAME="${{ env.DOCKER_IMAGE_PREFIX }}-master"
          IMAGE_TAG="${{ github.run_number }}"
          docker rmi $IMAGE_NAME:$IMAGE_TAG || true
